# -*- coding: utf-8 -*-
import torch
import torch.nn as nn
from torch.autograd import Variable
import matplotlib.pyplot as plt
import numpy as np
import torch.nn.functional as F


class LabelSmoothing(nn.Module):
    "Implement label smoothing.  size表示类别总数  "
    def __init__(self, size, smoothing=0.0):
        super(LabelSmoothing, self).__init__()
        self.criterion = nn.KLDivLoss(size_average=False)
        self.confidence = 1.0 - smoothing#if i=y的公式
        self.smoothing = smoothing
        self.size = size
        self.true_dist = None
    def forward(self, x, target):
        """
        x表示输入 (N，M)N个样本，M表示总类数，每一个类的概率log P
        target表示label（M，）
        """
        assert x.size(1) == self.size
        true_dist = x.data.clone()#先深复制过来
        #print true_dist
        true_dist.fill_(self.smoothing / (self.size - 1))#otherwise的公式
        #变成one-hot编码，1表示按列填充，
        #target.data.unsqueeze(1)表示索引,confidence表示填充的数字
        true_dist.scatter_(1, target.data.unsqueeze(1), self.confidence)
        self.true_dist = true_dist
        return self.criterion(x, Variable(true_dist, requires_grad=False))


class LSRLoss(nn.Module):
    """Cross entropy loss with label smoothing regularizer(lsr).
    change the ground truth 0,1 label distribution to a uniform 1/k label distribution, avoid largest logits
    tp prevent overfit
    Reference:
    Z Zheng. Unlabeled samples generated by gan improve the person re-identification baseline in vitro. ICCV2017
    Equation: y = (1 - epsilon) * y + epsilon / K.
    """

    def __init__(self, epsilon=0.1):
        super(LSRLoss, self).__init__()
        self.epsilon = epsilon

    def forward(self, input, target):
        """
        Args:
            inputs: prediction score (before softmax, torch  with shape (batch_size, num_classes
            targets: ground truth labels with shape (num_classes,), the value is 0,1
            epsilon: regularizer value weight
        """
        # normalize input
        maxRow, _ = torch.max(input.data, dim=1)
        # return the biggest value in each row
        maxRow = maxRow.unsqueeze(1)  # N,1
        input.data = input.data - maxRow

        log_probs = F.log_softmax(input, dim=-1)
        log_probs = torch.sum(log_probs, dim=1, keepdim=True) / log_probs.size(1)  # num_classes

        target = target.view(-1, 1)  # N*1
        target = target.type(torch.cuda.LongTensor).to(target.device)
        logpt = F.log_softmax(input, dim=1)  # N*classes
        logpt = logpt.gather(1, target)  # N*1 original loss
        epsilon = torch.FloatTensor([self.epsilon]).to(target.device)
        loss = -1 * logpt * (1 - epsilon) - log_probs * epsilon
        return loss.mean()


# 支持多分类和二分类
class FocalLoss(nn.Module):
    """
    This is a implementation of Focal Loss with smooth label cross entropy supported which is proposed in
    'Focal Loss for Dense Object Detection. (https://arxiv.org/abs/1708.02002)'
        Focal_Loss= -1*alpha*(1-pt)^gamma*log(pt)
    :param num_class:
    :param alpha: (tensor) 3D or 4D the scalar factor for this criterion
    :param gamma: (float,double) gamma > 0 reduces the relative loss for well-classified examples (p>0.5) putting more
                    focus on hard misclassified example
    :param smooth: (float,double) smooth value when cross entropy
    :param balance_index: (int) balance class index, should be specific when alpha is float
    :param size_average: (bool, optional) By default, the losses are averaged over each loss element in the batch.
    """

    def __init__(self, num_class, alpha=None, gamma=2, balance_index=-1, smooth=None, size_average=True):
        super(FocalLoss, self).__init__()
        self.num_class = num_class
        self.alpha = alpha
        self.gamma = gamma
        self.smooth = smooth
        self.size_average = size_average

        if self.alpha is None:
            self.alpha = torch.ones(self.num_class, 1)
        elif isinstance(self.alpha, (list, np.ndarray)):
            assert len(self.alpha) == self.num_class
            self.alpha = torch.FloatTensor(alpha).view(self.num_class, 1)
            self.alpha = self.alpha / self.alpha.sum()
        elif isinstance(self.alpha, float):
            alpha = torch.ones(self.num_class, 1)
            alpha = alpha * (1 - self.alpha)
            alpha[balance_index] = self.alpha
            self.alpha = alpha
        else:
            raise TypeError('Not support alpha type')

        if self.smooth is not None:
            if self.smooth < 0 or self.smooth > 1.0:
                raise ValueError('smooth value should be in [0,1]')

    def forward(self, input, target):
        logit = F.softmax(input, dim=1)

        if logit.dim() > 2:
            # N,C,d1,d2 -> N,C,m (m=d1*d2*...)
            logit = logit.view(logit.size(0), logit.size(1), -1)
            logit = logit.permute(0, 2, 1).contiguous()
            logit = logit.view(-1, logit.size(-1))
        target = target.view(-1, 1)

        # N = input.size(0)
        # alpha = torch.ones(N, self.num_class)
        # alpha = alpha * (1 - self.alpha)
        # alpha = alpha.scatter_(1, target.long(), self.alpha)
        epsilon = 1e-10
        alpha = self.alpha
        if alpha.device != input.device:
            alpha = alpha.to(input.device)

        idx = target.cpu().long()
        one_hot_key = torch.FloatTensor(target.size(0), self.num_class).zero_()
        one_hot_key = one_hot_key.scatter_(1, idx, 1)
        if one_hot_key.device != logit.device:
            one_hot_key = one_hot_key.to(logit.device)

        if self.smooth:
            one_hot_key = torch.clamp(
                one_hot_key, self.smooth, 1.0 - self.smooth)
        pt = (one_hot_key * logit).sum(1) + epsilon
        logpt = pt.log()

        gamma = self.gamma

        alpha = alpha[idx]
        loss = -1 * alpha * torch.pow((1 - pt), gamma) * logpt

        if self.size_average:
            loss = loss.mean()
        else:
            loss = loss.sum()
        return loss


def choose_loss(loss_name, num_class):
    if loss_name == "focal":
        return FocalLoss(num_class=num_class)
    elif loss_name == "ce":
        return torch.nn.CrossEntropyLoss()
    elif loss_name == "bce":
        return torch.nn.BCEWithLogitsLoss()
    else:
        raise NotImplementedError(f"Unknown LOSS type {loss_name}")


if __name__=="__main__":
    # Example of label smoothing.
    crit = FocalLoss(num_class=7)
    import os
    os.environ['CUDA_VISIBLE_DEVICES'] = "3"
    # crit = LSRLoss()
    #predict.shape 3 5
    input_ = torch.randn((4, 3, 576, 1024))
    gt_ = torch.from_numpy(np.array([1, 2, 4, 5]))
    output_ = torch.from_numpy(np.array([[0.01, 0.02, 0.01, 0.03, 0.05, 0.05, 0.02],
                                         [0.01, 0.02, 0.01, 0.03, 0.05, 0.05, 0.02],
                                         [0.01, 0.02, 0.01, 0.03, 0.05, 0.05, 0.02],
                                         [0.01, 0.02, 0.01, 0.03, 0.05, 0.05, 0.02]]))
    v = crit(output_, gt_)
    # Show the target distributions expected by the system.
    print('v', v)
    # plt.imshow(crit.true_dist)
